@model BookCatalog.Components.ViewModels.BookViewModel

@using (Ajax.BeginForm("Manage", "Book", new { Model, area = "MVC" }, new AjaxOptions() { OnSuccess = "onSuccess" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Name, htmlAttributes: new { @class = "form-control col-md-9" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublishedDate, htmlAttributes: new { @class = "control-label col-md-1", @type = "datetime" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.PublishedDate, @"{0:MM/dd/yyyy}", htmlAttributes: new { @class = "form-control col-md-10 datepicker" })
                @Html.ValidationMessageFor(model => model.PublishedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PagesCount, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.PagesCount, htmlAttributes: new { @class = "form-control col-md-10" })
                @Html.ValidationMessageFor(model => model.PagesCount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Rating, htmlAttributes: new { @class = "form-control col-md-10" })
                @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control col-md-9" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
       
        <div class="form-group">
            @Html.LabelFor(model => model.AuthorsIds, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">                
                @Html.ListBoxFor(model => model.AuthorsIds,
                    Model.AuthorsOptions,
                    htmlAttributes: new
                    {
                        id = "AuthorsIds",
                        multiple = "multiple",
                        @class = "chosen-select chosen form-group col-md-9",
                        data_placeholder = "Choose an author...",
                        style = "width:100%"
                        })
                @Html.ValidationMessageFor(model => model.AuthorsIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="Manage" type="submit" value="@((Model.Id == 0) ? "Create" : "Edit")" class="btn btn-default" />
                <input type="button" value="Cancel" id="CancelCreateBook" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/chosen.jquery.min.js")" type="text/javascript"></script>
<script type="text/javascript">
            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }
            var form = $("#BookForm");
            form.removeData('validator');
            form.removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse(form);
    $(document).ready(function () {
        $('.datepicker').datepicker();
    })
    function onSuccess(model) {
        if ( model["error"] != null && model["error"] != "" ) {
            alert(model["error"]);
        }
        else
        {
            $('#BookForm').empty();
            $('#BookForm').attr("style", "display:none");
            isedited = false;
            if (@Model.Id != 0)
            {
                $("tr:contains('" + @Model.Id + "')").each(function() {
                    booksTable.fnDeleteRow(this);
                });
            }
            model["Controls"] = buildControl(model["Id"]);
            booksTable.fnAddData(model);
        }
    }
    $('#CancelCreateBook').click(function () {
        $('#BookForm').attr("style", "display:none");
        $('#BookForm').empty();
        isedited = false;
    })
    function buildControl(bookId) {
        return "<input type='button' value='Edit' id='Edit' onclick='editBook(" + bookId + ")' class='makealink'> | <a href='Book/Details/" + bookId + "'>Details</a> | <input type='button' value='Delete' id='Delete' onclick='deleteBook(" + bookId + ")' class='makealink'>";
    }
</script>
