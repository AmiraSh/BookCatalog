@{ 
    Layout = null;
}
@(Html.Kendo().Grid<BookCatalog.Components.ViewModels.AuthorViewModel>()
      .Name("authors_grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.Id);
          columns.Bound(c => c.FirstName);
          columns.Bound(c => c.SecondName);
          columns.Bound(c => c.BooksCount).Sortable(false);
          columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
      })
      .ClientDetailTemplateId("AuthorDetails")
      .ToolBar(toolbar => {
          toolbar.Create();
      })
      .Filterable(filterable => filterable
        .Extra(false)
        .Operators(operators => operators
            .ForString(str => str.Clear()
                .Contains("Contains")
            )
            .ForNumber(num => num.Clear()
                .IsGreaterThanOrEqualTo("Greater than or equal")
                .IsGreaterThan("Greater than")
                .IsLessThanOrEqualTo("Less than or equal")
                .IsLessThan("Less than")
            )
            .ForDate(date => date.Clear()
                .IsGreaterThanOrEqualTo("Greater than or equal")
                .IsGreaterThan("Greater than")
                .IsLessThanOrEqualTo("Less than or equal")
                .IsLessThan("Less than")
            ))
        )
      .ColumnMenu()
      .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("AuthorForm"))
      .Pageable(page => page.Enabled(true).PageSizes(new[] { 7, 10, 15, 20, 30, 50, 100 }))
      .Selectable(selectable => {
          selectable.Mode(GridSelectionMode.Single);
          selectable.Type(GridSelectionType.Row);
      })
      .Sortable(sortable => {
          sortable.SortMode(GridSortMode.MultipleColumn);
      })
      .Scrollable()
      .DataSource(dataSource => dataSource
          .Ajax()
          .ServerOperation(true)
          .Model(model =>
          {
              model.Id(p => p.Id);
              model.Field(p => p.Id).Editable(false);
              model.Field(p => p.BooksCount).Editable(false);
              model.Field(p => p.Books).Editable(false);
          })
          .Read(read => read.Action("Read", "Author", new { area = "Kendo" }))
          .Create(create => create.Action("KendoManage", "Author", new { area = "Kendo" }))
          .Update(update => update.Action("KendoManage", "Author", new { area = "Kendo" }))
          .Destroy(destroy => destroy.Action("Destroy", "Author", new { area = "Kendo" }))
      )
)
<script type="text/x-kendo-template" id="AuthorDetails">
    <div id="details-container">
        <h2>#= FirstName # #= SecondName #</h2>
        <dl class="dl-horizontal">
            <dt>Books Count:</dt>
            <dd> #= BooksCount #</dd>
            <dt>Books:</dt>
            <dd> #= printBooks(Books, Id) #</dd>
        </dl>
        <input type="hidden" value="#= printBooksChart(Id) #" />
        <div id="chart_#:Id#"> </div>
    </div>
</script>
<script>
    function printBooks(Books, Id) {
        var result = "";
        var j = Books.length;
        for(var i = 0; i < j; i++) {
            result += Books[i].Name + ", " + Books[i].Year + "<br />";
        }
        return result;
    }
    function printBooksChart(Id) {
        $.ajax({
            url: "Author/BooksChart/" + Id,
            type: 'GET',
            success: function (response) {
                $("#chart_" + Id).html(response);
            }
        });
    }
</script>